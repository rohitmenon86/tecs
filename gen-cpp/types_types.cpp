/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "types_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace de { namespace dfki { namespace tecs { namespace examples { namespace helloworld {


HelloWorldEvent::~HelloWorldEvent() throw() {
}


void HelloWorldEvent::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t HelloWorldEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HelloWorldEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HelloWorldEvent");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HelloWorldEvent &a, HelloWorldEvent &b) {
  using ::std::swap;
  swap(a.message, b.message);
}

HelloWorldEvent::HelloWorldEvent(const HelloWorldEvent& other0) {
  message = other0.message;
}
HelloWorldEvent& HelloWorldEvent::operator=(const HelloWorldEvent& other1) {
  message = other1.message;
  return *this;
}
void HelloWorldEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HelloWorldEvent(";
  out << "message=" << to_string(message);
  out << ")";
}

}}}}} // namespace
