/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace de { namespace dfki { namespace tecs { namespace examples { namespace helloworld {

class HelloWorldEvent;


class HelloWorldEvent {
 public:

  HelloWorldEvent(const HelloWorldEvent&);
  HelloWorldEvent& operator=(const HelloWorldEvent&);
  HelloWorldEvent() : message("HelloWorld") {
  }

  virtual ~HelloWorldEvent() throw();
  std::string message;

  void __set_message(const std::string& val);

  bool operator == (const HelloWorldEvent & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const HelloWorldEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloWorldEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloWorldEvent &a, HelloWorldEvent &b);

inline std::ostream& operator<<(std::ostream& out, const HelloWorldEvent& obj)
{
  obj.printTo(out);
  return out;
}

}}}}} // namespace

#endif
